class RadioController {
	int curVal;
}

class RadioButton : ButtonBase {
	protected RadioController variable;
	RadioController getVariable() { return self.variable; }
	void setVariable(RadioController variable) { self.variable = variable; }

	protected int value;
	int getValue() { return self.value; }
	void setValue(int value) { self.value = value; }

	protected bool click;
	protected bool hover;

	void config(
		RadioController variable, int value,
		ButtonAnimator animator = NULL,
		string text = "", Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		AlignType alignment = AlignType_Center, Handler cmdHandler = NULL, string command = ""
	) {
		setAnimator(animator);

		setFont(fnt);
		setText(text);
		setTextScale(textScale);
		setTextColor(textColor);
		setAlignment(alignment);
		setVariable(variable);
		setValue(value);
		ButtonState initial;
		setCurButtonState(initial);
		setAlpha(1.0);

		self.cmdHandler = cmdHandler;
		self.command = command;
	}

	static RadioButton create(
		Vector2 pos, Vector2 size,
		RadioController variable, int value,
		ButtonAnimator animator = NULL,
		string text = "", Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		AlignType alignment = AlignType_Center, Handler cmdHandler = NULL, string command = ""
	) {
		let ret = new('RadioButton');

		ret.config(variable, value, animator, text, fnt, textScale, textColor, alignment, cmdHandler, command);
		ret.setBox(pos, size);
		ret.doneInitialSetup = true;
		if (ret.animator != NULL) {
			let a = ButtonAnimator(ret.animator);
			a.initialSetupDone(
				ret,
				ret.box,
				ret.text,
				ret.textScale,
				ret.textColor,
				ret.fnt,
				ret.alignment,
				ret.curButtonState,
				ret.animStorage
			);
		}

		return ret;
	}

	override bool onNavEvent(NavEventType type, bool fromController) {
		if (isEnabled() && isFocused() && type == NavEventType_Confirm) {
			variable.curVal = value;
			if (cmdHandler != NULL) {
				cmdHandler.radioButtonChanged(self, command, variable);
			}
			return true;
		}
		return false;
	}

	override void activate() {
		variable.curVal = value;
		if (cmdHandler != NULL) {
			cmdHandler.radioButtonChanged(self, command, variable);
		}
	}

	override bool handleMousePosition(bool mouseBlock, Vector2 mousePos) {
		if (isEnabled()) {
			AABB screenBox; boxToScreen(screenBox);
			if (!mouseBlock && screenBox.pointCollides(mousePos)) {
				hover = true;
			}
			else {
				hover = false;
			}
		}
		return false;
	}

	override void drawer() {
		ButtonState s;
		makeButtonState(s, variable.curVal == value, !getHoverBlock() && hover, click, !isEnabled());
		if (!self.curButtonState.eq(s)) { setCurButtonState(s); }
		Super.drawer();
	}

	override bool onUIEvent(UiEvent ev) {
		// if the player's clicked, and their mouse is in the right place, set the state accordingly
		if (ev.type == UIEvent.Type_LButtonDown) {
			let mousePos = getGlobalStore().mousePos;
			AABB screenBox; boxToScreen(screenBox);
			if (!mouseBlock && isEnabled() && screenBox.pointCollides(mousePos)) {
				click = true;
				setHoverBlock(self);
			}
		}
		// if the player's releasing, check if their mouse is still in the correct range and trigger method if it was
		else if (ev.type == UIEvent.Type_LButtonUp) {
			if (isEnabled()) {
				let mousePos = getGlobalStore().mousePos;
				AABB screenBox; boxToScreen(screenBox);
				if (screenBox.pointCollides(mousePos) && click) {
					variable.curVal = value;
					if (cmdHandler != NULL) {
						cmdHandler.radioButtonChanged(self, command, variable);
					}
				}
				click = false;
				setHoverBlock(NULL);
			}
		}
		// if the player's mouse has moved, update the tracked position and do a quick hover check
		return false;
	}
}
