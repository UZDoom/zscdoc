class ZF_ToggleButton : ZF_ButtonBase {
	protected bool on;

	protected bool hover;
	protected bool click;

	deprecated("0.5.0", "dont use plz") void config(
		string text = "",
		ZF_ButtonAnimator animator = NULL,
		Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		ZF_AlignType alignment = ZF_AlignType_Center, ZF_Handler cmdHandler = NULL, string command = ""
	) {
		setAnimator(animator);

		setFont(fnt);
		setText(text);
		setTextScale(textScale);
		setTextColor(textColor);
		setAlignment(alignment);
		ZF_ButtonState initial;
		setCurButtonState(initial);
		setAlpha(1.0);

		self.cmdHandler = cmdHandler;
		self.command = command;
	}

	static ZF_ToggleButton create(
		Vector2 pos, Vector2 size, string text = "",
		ZF_ButtonAnimator animator = NULL, Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		ZF_AlignType alignment = ZF_AlignType_Center, ZF_Handler cmdHandler = NULL, string command = ""
	) {
		let ret = new('ZF_ToggleButton');

		ret.config(text, animator, fnt, textScale, textColor, alignment, cmdHandler, command);
		ret.setBox(pos, size);
		ret.doneInitialSetup = true;
		if (ret.animator != NULL) {
			let a = ZF_ButtonAnimator(ret.animator);
			a.initialSetupDone(
				ret,
				ret.box,
				ret.text,
				ret.textScale,
				ret.textColor,
				ret.fnt,
				ret.alignment,
				ret.curButtonState,
				ret.animStorage
			);
		}

		return ret;
	}

	override bool handleMousePosition(bool mouseBlock, Vector2 mousePos) {
		if (isEnabled()) {
			ZF_AABB screenBox; boxToScreen(screenBox);
			if (!mouseBlock && screenBox.pointCollides(mousePos)) {
				hover = true;
			}
			else {
				hover = false;
			}
		}
		return false;
	}

	override void drawer() {
		ZF_ButtonState s;
		makeButtonState(s, on, !getHoverBlock() && hover, click, !isEnabled());
		if (!self.curButtonState.eq(s)) { setCurButtonState(s); }
		Super.drawer();
	}

	override bool onNavEvent(ZF_NavEventType type, bool fromController) {
		if (isEnabled() && isFocused() && type == ZF_NavEventType_Confirm) {
			on = !on;
			if (cmdHandler != NULL) {
				cmdHandler.toggleButtonChanged(self, command, on);
			}
			return true;
		}
		return false;
	}

	override void activate() {
		on = !on;
		if (cmdHandler != NULL) {
			cmdHandler.toggleButtonChanged(self, command, on);
		}
	}

	override bool onUIEvent(ZF_UiEvent ev) {
		// if the player's clicked, and their mouse is in the right place, set the state accordingly
		if (ev.type == UIEvent.Type_LButtonDown) {
			let mousePos = getGlobalStore().mousePos;
			ZF_AABB screenBox; boxToScreen(screenBox);
			if (!mouseBlock && isEnabled() && screenBox.pointCollides(mousePos)) {
				click = true;
				setHoverBlock(self);
			}
		}
		// if the player's releasing, check if their mouse is still in the correct range and trigger method if it was
		else if (ev.type == UIEvent.Type_LButtonUp) {
			if (isEnabled()) {
				let mousePos = getGlobalStore().mousePos;
				ZF_AABB screenBox; boxToScreen(screenBox);
				if (screenBox.pointCollides(mousePos) && click) {
					on = !on;
					if (cmdHandler != NULL) {
						cmdHandler.toggleButtonChanged(self, command, on);
					}
				}
				click = false;
				setHoverBlock(NULL);
			}
		}
		return false;
	}
}
